circ = read.csv("Charm_City_Circulator_Ridership.csv",
header=TRUE,as.is=TRUE)
View(circ)
strIcirc)
str(circ)
head(sort(circ$date))
circ$newDate <- as.Date(circ$date, "%m/%d/%Y") # creating a date for sorting
head(circ$newDate)
range(circ$newDate)
max(circ$newDate)
library(lubridate) # great for dates!
install.packages("lubridate")
library(lubridate) # great for dates!
library(lubridate) # great for dates!
install.packages("lubridate")
library(lubridate) # great for dates!
install.packages("dplyr")
suppressPackageStartupMessages(library(dplyr))
circ = mutate(circ, newDate2 = mdy(date))
head(circ$newDate2)
range(circ$newDate2)
n = 1:9
n
mat = matrix(n, nrow = 3)
mat
mat = matrix(n, nrow = 2)
mat
nrow(mat)
ncol(mat)
length(mat)
dim(mat)
mat[1, 1] # individual entry: row 1, column 1
mat[1, ] # first row
mat[, 1] # first columns
mat[,3]
ar = array(1:27, c(3,3,3))
ar[,,1]
ar[,,3]
mylist <- list(letters=c("A", "b", "c"),
numbers=1:3, matrix(1:25, ncol=5))
mylist
mylist[1] # returns a list
mylist["letters"] # returns a list
mylist[1:2] # returns a list
mylist$letters[1]
mylist[[2]][1]
mylist[[3]][1:2,1:2]
View(circ)
dayList = split(circ,circ$day)
View(mylist)
View(dayList)
# head(dayList)
lapply(dayList, head, n=2)
library(MASS)
head(Cars93, 3)
Cars93.metric <- transform(Cars93,
KMPL.city = 0.425 * MPG.city,
KMPL.highway = 0.425 * MPG.highway)
tail(names(Cars93.metric))
names(Cars93.metric)
manufacturer <- Cars93$Manufacturer
head(manufacturer, 10)
install.packages("plyr")
library(plyr)
# Map Chevrolet, Pontiac and Buick to GM
manufacturer.combined <- mapvalues(manufacturer,
from = c("Chevrolet", "Pontiac", "Buick"),
to = rep("GM", 3))
head(manufacturer.combined, 10)
survey <- read.table("survey_data.csv", header=TRUE, sep=",")
View(survey)
View(survey)
survey <- transform(survey, Program=as.numeric(Program))
head(survey)
survey <- transform(survey,
Program = as.factor(mapvalues(Program,
c(1, 2, 3),
c("MISM", "Other", "PPM")))
)
head(survey)
table(Cars93$AirBags)
table(Cars93$Origin)
table(Cars93$AirBags, Cars93$Origin)
head(Cars93[c("AirBags", "Origin")], 3)
table(Cars93[c("AirBags", "Origin")])
addOne <- function(x) {
x + 1
}
addOne(5)
hyp <- function(x,y){
sqrt(x^2+y^2)
}
hyp(3,4)
hyp(7,8)
calculatePercentage <- function(x, y, d) {
decimal <- x / y  # Calculate decimal value
round(100 * decimal, d)  # Convert to % and round to d digits
}
calculatePercentage(27, 80, 1)
calculatePercentage(203, 240, 1)
createPatientRecord <- function(full.name, weight, height) {
name.list <- strsplit(full.name, split=" ")[[1]]
first.name <- name.list[1]
last.name <- name.list[2]
weight.in.kg <- weight / 2.2
height.in.m <- height * 0.0254
bmi <- weight.in.kg / (height.in.m ^ 2)
list(first.name=first.name, last.name=last.name, weight=weight.in.kg, height=height.in.m,
bmi=bmi)
}
createPatientRecord("Michael Smith", 185, 12 * 6 + 1)
createPatientRecord("mahmoud affou", 195, 12 * 6 + 4)
calculateLetterGrade <- function(x) {
if(x >= 90) {
grade <- "A"
} else if(x >= 80) {
grade <- "B"
} else if(x >= 70) {
grade <- "C"
} else {
grade <- "F"
}
grade
}
course.grades <- c(92, 78, 87, 91, 62)
calculateLetterGrade(95)
calculateLetterGrade(75)
course.grades <- c(92, 78, 87, 91, 62)
sapply(course.grades, FUN=calculateLetterGrade)
sapply(course.grades, FUN=mean)
sapply(course.grades, FUN=max)
apply(course.grades, FUN=max)
lapply(course.grades, FUN=max)
addOne <- function(x) {
return(x + 1)
}
addOne(12)
# 6. Tabulate "type" and "treatment" - what are the dimensions of the resulting table?
#		hint: you can assign tables to variables
tab = table(CO2$Type, CO2$Treatment)
dim(tab)
tab
CO2.even = CO2[seq(2,nrow(CO2),by=2),]
CO2.even[1,]
# 8. How many observations are in `CO2.even`?
dim(CO2.even)
# 9. What are the sums of the a) concentrations and b) uptake values in the `CO2.even` dataset?
#		And what are their means?
sum(CO2.even$conc)
ifelse(75>=50,TRUE,FALSE)
ifelse(15>=50,TRUE,FALSE)
isPassingGrade2 <- function(x) (x >= 50)
isPassingGrade2(45)
isPassingGrade2(90)
sendMessage <- function(x) {
if(isPassingGrade(x)) {
print("Congratulations!")
} else {
print("Oh no!")
}
}
sendMessage(45)
sendMessage <- function(x) {
if(isPassingGrade(x)) {
print("Congratulations!")
} else {
print("Oh no!")
}
}
sendMessage(45)
sendMessage(90)
sendMessage2 <- function(x) print(ifelse(isPassingGrade(x), "Congratulations", "Oh no!"))
sendMessage2(45)
isPassingGrade <- function(x) {
did.pass <- TRUE
if(x < 50) {
did.pass <- FALSE
}
did.pass
}
isPassingGrade(45)
isPassingGrade(90)
# Here's an alternative, using different syntax
isPassingGrade2 <- function(x) (x >= 50)
isPassingGrade2(45)
isPassingGrade2(90)
sendMessage <- function(x) {
if(isPassingGrade(x)) {
print("Congratulations!")
} else {
print("Oh no!")
}
}
sendMessage(45)
sendMessage(90)
# Here's another way of accomplishing the same thing
sendMessage2 <- function(x) print(ifelse(isPassingGrade(x), "Congratulations", "Oh no!"))
sendMessage2(45)
sendMessage2(90)
gradeSummary <- function(x) {
if(x >= 90) {
letter.grade <- "A"
passed <- TRUE
} else if (x >= 80) {
letter.grade <- "B"
passed <- TRUE
} else {
letter.grade <- "F"
passed <- FALSE
}
list(letter.grade = letter.grade, passed = passed)
}
list(letter.grade = "A", passed = TRUE)
gradeSummary(91)
gradeSummary(62)
table(Cars93$DriveTrain, Cars93$Origin)
x<-1:5
apply(x,1,mean)
apply(x,mean)
apply(x,2,mean)
y<- matrix(x,3)
y
apply(y,2,mean)
apply(y,mean)
apply(y,1,mean)
apply(x,as.character)
apply(x,as.character())
apply(x,2, sort)
laply(x, sort)
laply(x, max)
laply(x, min)
laply(x, mean)
laply(x, as.character)
